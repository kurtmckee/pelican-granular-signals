[tox]
envlist =
    coverage-erase
    py{312, 311, 310, 39, 38}
    coverage-report
    mypy
skip_missing_interpreters = True
isolated_build = True
labels =
    update=update


[testenv:py{312, 311, 310, 39, 38}]
description = Run the test suite ({env_name})
deps =
    -rrequirements/test/requirements.txt
package = wheel
wheel_build_env = build_wheel
depends =
    coverage-erase
commands_pre =
    # It is impossible to pin Pelican as a dependency neatly,
    # because its Python version requirements are finicky and malleable.
    pip install --upgrade pelican
commands =
    coverage run -m pytest


[testenv:coverage-erase]
description = Erase .coverage* files before testing
skip_install = true
deps = coverage[toml]
commands = coverage erase


[testenv:coverage-report{,-ci}]
description = Report code coverage after testing
depends =
    py{312, 311, 310, 39, 38}
skip_install = true
deps = coverage[toml]
commands_pre =
    -coverage combine
commands =
    coverage report
commands_post =
    # Only output an HTML report when running locally.
    !ci: coverage html --fail-under=0


[testenv:mypy]
description = Lint type annotations using mypy
skip_install = true
deps =
    -rrequirements/mypy/requirements.txt
setenv =
    MYPY_FORCE_COLOR=1
commands = mypy


[testenv:update]
base_python = py312
recreate = true
description = Update testing and linting dependency versions
skip_install = true
deps =
    poetry
    pre-commit
    upadup
commands =
    # Update test requirements
    poetry update --directory='requirements/mypy' --lock
    poetry export --directory='requirements/mypy' --output='requirements/mypy/requirements.txt' --without-hashes
    poetry update --directory='requirements/test' --lock
    poetry export --directory='requirements/test' --output='requirements/test/requirements.txt' --without-hashes

    # Update pre-commit hook versions
    pre-commit autoupdate
    upadup


[flake8]
max-line-length = 88
extend-ignore = E203
